export type ConfigValueTypeName = "string" | "number" | "boolean" | "string[]";

export interface ConfigDefinition {
  envVar?: string;
  type: ConfigValueTypeName;
  default: unknown;
  group: string;
  description: string;
  sensitive?: boolean;
}

export type ConfigKey = keyof typeof CONFIG_DEFINITIONS;

export const CONFIG_DEFINITIONS = {
  kbGatheringTimeoutHours: {
    envVar: "KB_GATHERING_TIMEOUT_HOURS",
    type: "number",
    default: 24,
    group: "knowledge_base",
    description: "Hours before cached KB gathering results expire.",
  },
  kbGatheringMaxAttempts: {
    envVar: "KB_GATHERING_MAX_ATTEMPTS",
    type: "number",
    default: 5,
    group: "knowledge_base",
    description: "Maximum retries when fetching KB context.",
  },
  assistantMinDescriptionLength: {
    envVar: "ASSISTANT_MIN_DESCRIPTION_LENGTH",
    type: "number",
    default: 10,
    group: "assistant",
    description: "Minimum characters required to trigger assistant analysis.",
  },
  assistantSimilarCasesTopK: {
    envVar: "ASSISTANT_SIMILAR_CASES_TOP_K",
    type: "number",
    default: 3,
    group: "assistant",
    description: "Number of similar cases to surface for assistants.",
  },
  kbSimilarCasesTopK: {
    envVar: "KB_SIMILAR_CASES_TOP_K",
    type: "number",
    default: 3,
    group: "knowledge_base",
    description: "Number of KB articles to retrieve per classification.",
  },
  caseClassificationWriteNotes: {
    envVar: "CASE_CLASSIFICATION_WRITE_NOTES",
    type: "boolean",
    default: false,
    group: "classification",
    description: "Write classification results back to ServiceNow as work notes.",
  },
  caseClassificationMaxRetries: {
    envVar: "CASE_CLASSIFICATION_MAX_RETRIES",
    type: "number",
    default: 3,
    group: "classification",
    description: "Maximum retry attempts for classification jobs.",
  },
  assistantActiveStates: {
    envVar: "ASSISTANT_ACTIVE_STATES",
    type: "string[]",
    default: [
      "New",
      "In Progress",
      "On Hold",
      "Pending",
      "Awaiting Info",
      "Work in Progress",
    ],
    group: "assistant",
    description: "Case states that allow intelligent assistance.",
  },
  proactiveTroubleshootingEnabled: {
    envVar: "PROACTIVE_TROUBLESHOOTING_ENABLED",
    type: "boolean",
    default: true,
    group: "assistant",
    description: "Enable proactive troubleshooting suggestions.",
  },
  autoCmdbLookupEnabled: {
    envVar: "AUTO_CMDB_LOOKUP_ENABLED",
    type: "boolean",
    default: true,
    group: "cmdb",
    description: "Auto-fetch CMDB context during triage.",
  },
  maxClarifyingQuestions: {
    envVar: "MAX_CLARIFYING_QUESTIONS",
    type: "number",
    default: 4,
    group: "assistant",
    description: "Maximum follow-up questions the assistant asks.",
  },
  cmdbReconciliationEnabled: {
    envVar: "CMDB_RECONCILIATION_ENABLED",
    type: "boolean",
    default: false,
    group: "cmdb",
    description: "Enable CMDB reconciliation workflow.",
  },
  cmdbReconciliationConfidenceThreshold: {
    envVar: "CMDB_RECONCILIATION_CONFIDENCE_THRESHOLD",
    type: "number",
    default: 0.7,
    group: "cmdb",
    description: "Minimum confidence required to reconcile CMDB records.",
  },
  cmdbReconciliationCacheResults: {
    envVar: "CMDB_RECONCILIATION_CACHE_RESULTS",
    type: "boolean",
    default: true,
    group: "cmdb",
    description: "Cache reconciliation lookups for faster repeats.",
  },
  cmdbReconciliationAssignmentGroup: {
    envVar: "CMDB_RECONCILIATION_ASSIGNMENT_GROUP",
    type: "string",
    default: "CMDB Administrators",
    group: "cmdb",
    description: "Default assignment group for CMDB reconciliation tasks.",
  },
  cmdbReconciliationSlackChannel: {
    envVar: "CMDB_RECONCILIATION_SLACK_CHANNEL",
    type: "string",
    default: "cmdb-alerts",
    group: "cmdb",
    description: "Slack channel for CMDB reconciliation notifications.",
  },
  incidentCreationAllowedGroups: {
    envVar: "INCIDENT_CREATION_ALLOWED_GROUPS",
    type: "string[]",
    default: ["Incident and Case Management"],
    group: "itsm",
    description: "Assignment groups eligible for auto incident creation.",
  },
  escalationEnabled: {
    envVar: "ESCALATION_ENABLED",
    type: "boolean",
    default: true,
    group: "triage",
    description: "Automatically escalate non-BAU cases to Slack.",
  },
  escalationBiScoreThreshold: {
    envVar: "ESCALATION_BI_SCORE_THRESHOLD",
    type: "number",
    default: 20,
    group: "triage",
    description: "Business intelligence score threshold for escalation (0-100).",
  },
  escalationDefaultChannel: {
    envVar: "ESCALATION_DEFAULT_CHANNEL",
    type: "string",
    default: "case-escalations",
    group: "triage",
    description: "Fallback Slack channel when no client-specific routing exists.",
  },
  escalationNotifyAssignedEngineer: {
    envVar: "ESCALATION_NOTIFY_ASSIGNED_ENGINEER",
    type: "boolean",
    default: true,
    group: "triage",
    description: "Mention the assigned engineer in escalation messages.",
  },
  escalationUseLlmMessages: {
    envVar: "ESCALATION_USE_LLM_MESSAGES",
    type: "boolean",
    default: true,
    group: "triage",
    description: "Use LLM-generated Slack content for escalations when available.",
  },
  llmTimeoutMs: {
    envVar: "LLM_TIMEOUT_MS",
    type: "number",
    default: 30_000,
    group: "llm",
    description: "Default timeout (ms) for general LLM operations.",
  },
  llmClassificationTimeoutMs: {
    envVar: "LLM_CLASSIFICATION_TIMEOUT_MS",
    type: "number",
    default: 15_000,
    group: "llm",
    description: "Timeout (ms) for case classification requests.",
  },
  llmKBGenerationTimeoutMs: {
    envVar: "LLM_KB_GENERATION_TIMEOUT_MS",
    type: "number",
    default: 45_000,
    group: "llm",
    description: "Timeout (ms) for KB generation tasks.",
  },
  llmEscalationTimeoutMs: {
    envVar: "LLM_ESCALATION_TIMEOUT_MS",
    type: "number",
    default: 20_000,
    group: "llm",
    description: "Timeout (ms) for escalation message generation.",
  },
  catalogRedirectEnabled: {
    envVar: "CATALOG_REDIRECT_ENABLED",
    type: "boolean",
    default: false,
    group: "catalog_redirect",
    description: "Enable HR catalog redirect workflow for misrouted cases.",
  },
  catalogRedirectConfidenceThreshold: {
    envVar: "CATALOG_REDIRECT_CONFIDENCE_THRESHOLD",
    type: "number",
    default: 0.5,
    group: "catalog_redirect",
    description: "Minimum detector confidence required to trigger redirect.",
  },
  catalogRedirectAutoClose: {
    envVar: "CATALOG_REDIRECT_AUTO_CLOSE",
    type: "boolean",
    default: false,
    group: "catalog_redirect",
    description: "Automatically close cases after redirect when supported.",
  },
  catalogRedirectNotifySlack: {
    envVar: "CATALOG_REDIRECT_NOTIFY_SLACK",
    type: "boolean",
    default: false,
    group: "catalog_redirect",
    description: "Send Slack notifications when catalog redirects occur.",
  },
  supportContactInfo: {
    envVar: "SUPPORT_CONTACT_INFO",
    type: "string",
    default: "",
    group: "catalog_redirect",
    description: "Contact info added to catalog redirect work notes.",
  },
  slackSigningSecret: {
    envVar: "SLACK_SIGNING_SECRET",
    type: "string",
    default: "",
    group: "slack",
    description: "Slack signing secret used to verify incoming requests.",
    sensitive: true,
  },
  slackBotToken: {
    envVar: "SLACK_BOT_TOKEN",
    type: "string",
    default: "",
    group: "slack",
    description: "Bot token for Slack API calls.",
    sensitive: true,
  },
  servicenowInstanceUrl: {
    envVar: "SERVICENOW_INSTANCE_URL",
    type: "string",
    default: "",
    group: "servicenow",
    description: "Base URL for the ServiceNow instance (e.g., https://example.service-now.com).",
  },
  servicenowUrl: {
    envVar: "SERVICENOW_URL",
    type: "string",
    default: "",
    group: "servicenow",
    description: "Alias for ServiceNow instance URL (legacy support).",
  },
  servicenowUsername: {
    envVar: "SERVICENOW_USERNAME",
    type: "string",
    default: "",
    group: "servicenow",
    description: "ServiceNow username for basic auth.",
    sensitive: true,
  },
  servicenowPassword: {
    envVar: "SERVICENOW_PASSWORD",
    type: "string",
    default: "",
    group: "servicenow",
    description: "ServiceNow password for basic auth.",
    sensitive: true,
  },
  servicenowApiToken: {
    envVar: "SERVICENOW_API_TOKEN",
    type: "string",
    default: "",
    group: "servicenow",
    description: "ServiceNow API token for bearer authentication.",
    sensitive: true,
  },
  servicenowCaseTable: {
    envVar: "SERVICENOW_CASE_TABLE",
    type: "string",
    default: "sn_customerservice_case",
    group: "servicenow",
    description: "Table name used for ServiceNow case records.",
  },
  servicenowCaseJournalName: {
    envVar: "SERVICENOW_CASE_JOURNAL_NAME",
    type: "string",
    default: "x_mobit_serv_case_service_case",
    group: "servicenow",
    description: "Journal field name used for case work notes.",
  },
  servicenowCiTable: {
    envVar: "SERVICENOW_CI_TABLE",
    type: "string",
    default: "cmdb_ci",
    group: "servicenow",
    description: "Configuration item table name in ServiceNow.",
  },
  servicenowTaskTable: {
    envVar: "SERVICENOW_TASK_TABLE",
    type: "string",
    default: "sn_customerservice_task",
    group: "servicenow",
    description: "Task table name used for ServiceNow sub-tasks.",
  },
  aiGatewayApiKey: {
    envVar: "AI_GATEWAY_API_KEY",
    type: "string",
    default: "",
    group: "llm",
    description: "API key for the AI gateway proxy.",
    sensitive: true,
  },
  aiGatewayDefaultModel: {
    envVar: "AI_GATEWAY_DEFAULT_MODEL",
    type: "string",
    default: "",
    group: "llm",
    description: "Default model identifier for the AI gateway.",
  },
  aiGatewayModelOverride: {
    envVar: "AI_GATEWAY_MODEL",
    type: "string",
    default: "",
    group: "llm",
    description: "Optional override model for the AI gateway routing.",
  },
  openaiApiKey: {
    envVar: "OPENAI_API_KEY",
    type: "string",
    default: "",
    group: "llm",
    description: "OpenAI API key used for direct or fallback requests.",
    sensitive: true,
  },
  openaiFallbackModel: {
    envVar: "OPENAI_FALLBACK_MODEL",
    type: "string",
    default: "",
    group: "llm",
    description: "Fallback OpenAI model if the primary provider fails.",
  },
  anthropicApiKey: {
    envVar: "ANTHROPIC_API_KEY",
    type: "string",
    default: "",
    group: "llm",
    description: "Anthropic provider API key.",
    sensitive: true,
  },
  anthropicModel: {
    envVar: "ANTHROPIC_MODEL",
    type: "string",
    default: "",
    group: "llm",
    description: "Default model name for the Anthropic provider.",
  },
  langsmithApiKey: {
    envVar: "LANGSMITH_API_KEY",
    type: "string",
    default: "",
    group: "telemetry",
    description: "LangSmith API key for tracing LLM calls.",
    sensitive: true,
  },
  langsmithEndpoint: {
    envVar: "LANGSMITH_API_URL",
    type: "string",
    default: "",
    group: "telemetry",
    description: "LangSmith API endpoint override.",
  },
  langsmithProject: {
    envVar: "LANGSMITH_PROJECT",
    type: "string",
    default: "",
    group: "telemetry",
    description: "LangSmith project name for trace attribution.",
  },
  langsmithTracingEnabled: {
    envVar: "LANGSMITH_TRACING",
    type: "boolean",
    default: false,
    group: "telemetry",
    description: "Enable LangSmith tracing for LLM providers.",
  },
  azureSearchEndpoint: {
    envVar: "AZURE_SEARCH_ENDPOINT",
    type: "string",
    default: "",
    group: "search",
    description: "Azure Cognitive Search endpoint.",
  },
  azureSearchKey: {
    envVar: "AZURE_SEARCH_KEY",
    type: "string",
    default: "",
    group: "search",
    description: "Azure Cognitive Search API key.",
    sensitive: true,
  },
  azureSearchIndexName: {
    envVar: "AZURE_SEARCH_INDEX_NAME",
    type: "string",
    default: "",
    group: "search",
    description: "Default index name for Azure Cognitive Search.",
  },
  caseEmbeddingModel: {
    envVar: "CASE_EMBEDDING_MODEL",
    type: "string",
    default: "",
    group: "llm",
    description: "Model identifier used for embedding case content.",
  },
  qstashToken: {
    envVar: "QSTASH_TOKEN",
    type: "string",
    default: "",
    group: "queue",
    description: "Upstash QStash token for async job scheduling.",
    sensitive: true,
  },
  qstashCurrentSigningKey: {
    envVar: "QSTASH_CURRENT_SIGNING_KEY",
    type: "string",
    default: "",
    group: "queue",
    description: "Current signing key from Upstash QStash for webhook verification.",
    sensitive: true,
  },
  qstashNextSigningKey: {
    envVar: "QSTASH_NEXT_SIGNING_KEY",
    type: "string",
    default: "",
    group: "queue",
    description: "Next signing key from Upstash QStash for upcoming rotation.",
    sensitive: true,
  },
  webexAccessToken: {
    envVar: "WEBEX_CC_ACCESS_TOKEN",
    type: "string",
    default: "",
    group: "webex",
    description: "Webex Contact Center access token.",
    sensitive: true,
  },
  webexClientId: {
    envVar: "WEBEX_CC_CLIENT_ID",
    type: "string",
    default: "",
    group: "webex",
    description: "Webex Contact Center OAuth client ID.",
    sensitive: true,
  },
  webexClientSecret: {
    envVar: "WEBEX_CC_CLIENT_SECRET",
    type: "string",
    default: "",
    group: "webex",
    description: "Webex Contact Center OAuth client secret.",
    sensitive: true,
  },
  webexRefreshToken: {
    envVar: "WEBEX_CC_REFRESH_TOKEN",
    type: "string",
    default: "",
    group: "webex",
    description: "Webex Contact Center refresh token.",
    sensitive: true,
  },
  webexOrgId: {
    envVar: "WEBEX_CC_ORG_ID",
    type: "string",
    default: "",
    group: "webex",
    description: "Webex organization identifier.",
  },
  webexBaseUrl: {
    envVar: "WEBEX_CC_BASE_URL",
    type: "string",
    default: "https://webexapis.com",
    group: "webex",
    description: "Base URL for Webex Contact Center API.",
  },
  webexTasksPath: {
    envVar: "WEBEX_CC_TASKS_PATH",
    type: "string",
    default: "v1/tasks",
    group: "webex",
    description: "Tasks path for Webex Contact Center API.",
  },
  webexTokenUrl: {
    envVar: "WEBEX_CC_TOKEN_URL",
    type: "string",
    default: "https://webexapis.com/v1/access_token",
    group: "webex",
    description: "OAuth token endpoint for Webex.",
  },
  relayWebhookSecret: {
    envVar: "RELAY_WEBHOOK_SECRET",
    type: "string",
    default: "",
    group: "integrations",
    description: "Shared secret for Relay webhook verification.",
    sensitive: true,
  },
  exaApiKey: {
    envVar: "EXA_API_KEY",
    type: "string",
    default: "",
    group: "integrations",
    description: "API key for Exa search service.",
    sensitive: true,
  },
  caseWorkflowRouting: {
    envVar: "CASE_WORKFLOW_ROUTING",
    type: "string",
    default: "",
    group: "workflow",
    description: "JSON configuration for workflow routing rules.",
  },
  caseWorkflowPrompts: {
    envVar: "CASE_WORKFLOW_PROMPTS",
    type: "string",
    default: "",
    group: "workflow",
    description: "JSON configuration for workflow-specific prompt overrides.",
  },
  systemicPatternWithinDays: {
    envVar: "SYSTEMIC_PATTERN_WITHIN_DAYS",
    type: "number",
    default: 14,
    group: "classification",
    description: "Number of days considered for systemic pattern detection.",
  },
  mobizServiceDeskDomains: {
    envVar: "MOBIZ_SERVICE_DESK_DOMAINS",
    type: "string",
    default: "",
    group: "filters",
    description: "Comma-separated list of service desk domains for Mobiz filtering.",
  },
  hrRequestDetectorConfig: {
    envVar: "HR_REQUEST_DETECTOR_CONFIG",
    type: "string",
    default: "",
    group: "catalog_redirect",
    description: "JSON configuration overrides for HR request detector mappings.",
  },
  azureSqlDatabaseUrl: {
    envVar: "AZURE_SQL_DATABASE_URL",
    type: "string",
    default: "",
    group: "database",
    description: "Connection string for Azure SQL (sensitive).",
    sensitive: true,
  },
  adminApiKey: {
    envVar: "ADMIN_API_KEY",
    type: "string",
    default: "",
    group: "admin",
    description: "Shared secret for admin metrics endpoints.",
    sensitive: true,
  },
  adminApiToken: {
    envVar: "ADMIN_API_TOKEN",
    type: "string",
    default: "",
    group: "admin",
    description: "Authentication token for all admin API endpoints (business contexts, config, reports, etc.).",
    sensitive: true,
  },
  callSyncLookbackMinutes: {
    envVar: "CALL_SYNC_LOOKBACK_MINUTES",
    type: "number",
    default: 15,
    group: "integrations",
    description: "Minutes to look back when syncing Webex voice interactions.",
  },
  caseQueueChannelId: {
    envVar: "CASE_QUEUE_CHANNEL_ID",
    type: "string",
    default: "",
    group: "slack",
    description: "Slack channel ID used for case queue reporting.",
  },
  customerAccountNumber: {
    envVar: "CUSTOMER_ACCOUNT_NUMBER",
    type: "string",
    default: "",
    group: "clients",
    description: "Default customer account number used in scripts and onboarding.",
  },
  databaseUrl: {
    envVar: "DATABASE_URL",
    type: "string",
    default: "",
    group: "database",
    description: "Primary Postgres connection string.",
    sensitive: true,
  },
  devServicenowUrl: {
    envVar: "DEV_SERVICENOW_URL",
    type: "string",
    default: "",
    group: "servicenow",
    description: "Development ServiceNow instance URL (scripts/testing).",
  },
  devServicenowUsername: {
    envVar: "DEV_SERVICENOW_USERNAME",
    type: "string",
    default: "",
    group: "servicenow",
    description: "Development ServiceNow username.",
  },
  devServicenowPassword: {
    envVar: "DEV_SERVICENOW_PASSWORD",
    type: "string",
    default: "",
    group: "servicenow",
    description: "Development ServiceNow password.",
    sensitive: true,
  },
  devServicenowCaseTable: {
    envVar: "DEV_SERVICENOW_CASE_TABLE",
    type: "string",
    default: "",
    group: "servicenow",
    description: "Development ServiceNow case table name.",
  },
  dryRun: {
    envVar: "DRY_RUN",
    type: "boolean",
    default: true,
    group: "scripts",
    description: "When true (default), scripts operate in dry-run mode unless explicitly disabled.",
  },
  enableAsyncTriage: {
    envVar: "ENABLE_ASYNC_TRIAGE",
    type: "boolean",
    default: false,
    group: "triage",
    description: "Enable async triage processing queue.",
  },
  enableCaseClassification: {
    envVar: "ENABLE_CASE_CLASSIFICATION",
    type: "boolean",
    default: false,
    group: "classification",
    description: "Allow automatic case classification (legacy toggle).",
  },
  eventGridCaseEventsEndpoint: {
    envVar: "EVENT_GRID_CASE_EVENTS_ENDPOINT",
    type: "string",
    default: "",
    group: "integrations",
    description: "Azure Event Grid endpoint for case events.",
  },
  eventGridCaseEventsKey: {
    envVar: "EVENT_GRID_CASE_EVENTS_KEY",
    type: "string",
    default: "",
    group: "integrations",
    description: "Azure Event Grid access key for case events.",
    sensitive: true,
  },
  idempotencyWindowMinutes: {
    envVar: "IDEMPOTENCY_WINDOW_MINUTES",
    type: "number",
    default: 10,
    group: "triage",
    description: "Minutes to enforce idempotency for async triage payloads.",
  },
  incidentAutoCloseLimit: {
    envVar: "INCIDENT_AUTO_CLOSE_LIMIT",
    type: "number",
    default: 50,
    group: "incident_management",
    description: "Maximum incidents to auto-close per cron run.",
  },
  incidentAutoCloseMinutes: {
    envVar: "INCIDENT_AUTO_CLOSE_MINUTES",
    type: "number",
    default: 60,
    group: "incident_management",
    description: "Minutes to wait before auto-closing resolved incidents.",
  },
  incidentAutoCloseCode: {
    envVar: "INCIDENT_AUTO_CLOSE_CODE",
    type: "string",
    default: "Resolved - Awaiting Confirmation",
    group: "incident_management",
    description: "Close code used when auto-closing incidents.",
  },
  mobizLeaderboardChannel: {
    envVar: "MOBIZ_LEADERBOARD_CHANNEL",
    type: "string",
    default: "",
    group: "slack",
    description: "Slack channel ID for Mobiz service desk leaderboard posts.",
  },
  nextPublicAdminToken: {
    envVar: "NEXT_PUBLIC_ADMIN_TOKEN",
    type: "string",
    default: "",
    group: "admin_ui",
    description: "Public admin token exposed to the admin UI.",
  },
  nextPublicApiBaseUrl: {
    envVar: "NEXT_PUBLIC_API_BASE_URL",
    type: "string",
    default: "",
    group: "admin_ui",
    description: "Override API base URL for the admin UI (useful in development).",
  },
  servicenowCompanyId: {
    envVar: "SERVICENOW_COMPANY_ID",
    type: "string",
    default: "",
    group: "servicenow",
    description: "Default ServiceNow company ID used in scripts/tests.",
  },
  servicenowWebhookSecret: {
    envVar: "SERVICENOW_WEBHOOK_SECRET",
    type: "string",
    default: "",
    group: "servicenow",
    description: "Shared secret for validating ServiceNow webhook requests.",
    sensitive: true,
  },
  testCaseNumber: {
    envVar: "TEST_CASE_NUMBER",
    type: "string",
    default: "",
    group: "testing",
    description: "Default case number used in test scripts.",
  },
  uatServicenowUrl: {
    envVar: "UAT_SERVICENOW_URL",
    type: "string",
    default: "",
    group: "servicenow",
    description: "UAT ServiceNow instance URL.",
  },
  uatServicenowUsername: {
    envVar: "UAT_SERVICENOW_USERNAME",
    type: "string",
    default: "",
    group: "servicenow",
    description: "UAT ServiceNow username.",
  },
  uatServicenowPassword: {
    envVar: "UAT_SERVICENOW_PASSWORD",
    type: "string",
    default: "",
    group: "servicenow",
    description: "UAT ServiceNow password.",
    sensitive: true,
  },
  uatServicenowCaseTable: {
    envVar: "UAT_SERVICENOW_CASE_TABLE",
    type: "string",
    default: "",
    group: "servicenow",
    description: "UAT ServiceNow case table name.",
  },
  uatServicenowCompanyId: {
    envVar: "UAT_SERVICENOW_COMPANY_ID",
    type: "string",
    default: "",
    group: "servicenow",
    description: "UAT ServiceNow company ID.",
  },
  vercelEnv: {
    envVar: "VERCEL_ENV",
    type: "string",
    default: "",
    group: "platform",
    description: "Vercel environment indicator (production, preview, development).",
  },
  vercelOidcToken: {
    envVar: "VERCEL_OIDC_TOKEN",
    type: "string",
    default: "",
    group: "platform",
    description: "Vercel OIDC token for secure builds/deployments.",
    sensitive: true,
  },
  vercelUrl: {
    envVar: "VERCEL_URL",
    type: "string",
    default: "",
    group: "platform",
    description: "Vercel provided deployment URL.",
  },
  worknoteLookbackMinutes: {
    envVar: "WORKNOTE_LOOKBACK_MINUTES",
    type: "number",
    default: 60,
    group: "integrations",
    description: "Minutes lookback when syncing voice worknotes.",
  },
} as const satisfies Record<string, ConfigDefinition>;

type ValueType<T extends ConfigDefinition["type"]> = T extends "boolean"
  ? boolean
  : T extends "number"
    ? number
    : T extends "string[]"
      ? string[]
      : string;

export type ConfigValueMap = {
  [K in ConfigKey]: ValueType<(typeof CONFIG_DEFINITIONS)[K]["type"]>;
};
